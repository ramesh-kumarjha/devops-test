---


 - name: Use STS to assume role
   sts_assume_role:
    profile: "{{ profile_name }}"
    role_arn: arn:aws:iam::{{ account_id }}:role/Sys-admin
    role_session_name: ansible-sts-assume-role
    region: ap-southeast-1
   register: sts_assume_role

 - name: Provision EC2 Box
   ec2:
     aws_access_key: "{{ sts_assume_role.sts_creds.access_key }}"
     aws_secret_key: "{{ sts_assume_role.sts_creds.secret_key }}"
     security_token: "{{ sts_assume_role.sts_creds.session_token }}"
     profile: "{{ profile_name }}"
     key_name: "blackbuck_production"
     group_id: "{{ sg_group }}"
     instance_type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     vpc_subnet_id: "{{ ec2_subnet_ids }}"
     region: "{{ ec2_region }}"
     zone: "{{ availability_zone }}"
     monitoring: yes
     instance_profile_name: "ec2InstanceRole"
     instance_tags: '{"Name":"{{ec2_tag_Name}}","team_name":"{{ec2_tag_Team}}","release_env":"{{ec2_tag_Environment}}"}'
     assign_public_ip: yes
     wait: true
     count: 1
     volumes:
     - device_name: /dev/sda1
       #device_type: gp2
       device_type: gp3
       volume_size: "{{ ec2_volume_size }}"
       ec2_tags: '{"Name":"{{ec2_tag_Name}}","team_name":"{{ec2_tag_Team}}","release_env":"{{ec2_tag_Environment}}"}'
       delete_on_termination: true
   register: ec2

 - name: Retrieve all volumes for a queried instance
   ec2_vol:
     aws_access_key: "{{ sts_assume_role.sts_creds.access_key }}"
     aws_secret_key: "{{ sts_assume_role.sts_creds.secret_key }}"
     security_token: "{{ sts_assume_role.sts_creds.session_token }}"
     instance: '{{ item }}'
     region: ap-southeast-1
     state: list
   with_items: '{{ ec2.instance_ids }}'
   register: ec2_vol


 - name: Tag volumes
   ec2_tag:
     aws_access_key: "{{ sts_assume_role.sts_creds.access_key }}"
     aws_secret_key: "{{ sts_assume_role.sts_creds.secret_key }}"
     security_token: "{{ sts_assume_role.sts_creds.session_token }}"
     region: ap-southeast-1
     resource: "{{ item.1.id }}"
     tags: '{"Name":"{{ec2_tag_Name}}","team_name":"{{ec2_tag_Team}}","release_env":"{{ec2_tag_Environment}}"}'
   with_subelements:
      - "{{ ec2_vol.results }}"
      - volumes


 - name: Wait for SSH to come up
   wait_for: host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
   with_items: '{{ ec2.instances }}'

   when: ec2.changed

 - name: Gather EC2 facts
   ec2_remote_facts:
     aws_access_key: "{{ sts_assume_role.sts_creds.access_key }}"
     aws_secret_key: "{{ sts_assume_role.sts_creds.secret_key }}"
     security_token: "{{ sts_assume_role.sts_creds.session_token }}"
     region: "{{ ec2_region }}"
     filters:
       instance-state-name: running
       "tag:Name": "{{ ec2_tag_Name }}"
   register: ec2_facts

 - name: Add AWS hosts to groups
   add_host:
     name: "{{ item.tags.Name }}"
     ansible_ssh_host: "{{ item.public_ip_address }}"
     groups: ec2_hosts
   changed_when: false
   with_items: "{{ ec2_facts.instances }}"
- set_fact:
    public_ip: "{{ item.public_ip_address }}"
    with_items: "{{ ec2_facts.instances }}"
